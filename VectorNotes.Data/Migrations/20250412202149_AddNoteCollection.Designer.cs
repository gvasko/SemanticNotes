// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using VectorNotes.Data;

#nullable disable

namespace VectorNotes.Data.Migrations
{
    [DbContext(typeof(VectorNotesContext))]
    [Migration("20250412202149_AddNoteCollection")]
    partial class AddNoteCollection
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("vectornotes")
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("VectorNotes.DomainModel.Alphabet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OwnerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("Alphabets", "vectornotes");
                });

            modelBuilder.Entity("VectorNotes.DomainModel.Note", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NoteCollectionId")
                        .HasColumnType("int");

                    b.Property<int?>("OwnerId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("NoteCollectionId");

                    b.HasIndex("OwnerId");

                    b.ToTable("Notes", "vectornotes");
                });

            modelBuilder.Entity("VectorNotes.DomainModel.NoteCollection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("OwnerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.ToTable("NoteCollections", "vectornotes");
                });

            modelBuilder.Entity("VectorNotes.DomainModel.NoteTextVector", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AlphabetId")
                        .HasColumnType("int");

                    b.Property<int?>("NoteId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AlphabetId");

                    b.HasIndex("NoteId");

                    b.ToTable("NoteTextVectorCache", "vectornotes");
                });

            modelBuilder.Entity("VectorNotes.DomainModel.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users", "vectornotes");
                });

            modelBuilder.Entity("VectorNotes.DomainModel.Alphabet", b =>
                {
                    b.HasOne("VectorNotes.DomainModel.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsMany("VectorNotes.DomainModel.LetterVector", "LetterVectors", b1 =>
                        {
                            b1.Property<int>("AlphabetId")
                                .HasColumnType("int");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("Id"));

                            b1.Property<string>("Letter")
                                .IsRequired()
                                .HasColumnType("nvarchar(1)");

                            b1.HasKey("AlphabetId", "Id");

                            b1.ToTable("LetterVector", "vectornotes");

                            b1.WithOwner()
                                .HasForeignKey("AlphabetId");

                            b1.OwnsOne("VectorNotes.DomainModel.HiDimBipolarVector", "Vector", b2 =>
                                {
                                    b2.Property<int>("LetterVectorAlphabetId")
                                        .HasColumnType("int");

                                    b2.Property<int>("LetterVectorId")
                                        .HasColumnType("int");

                                    b2.Property<byte[]>("Data")
                                        .IsRequired()
                                        .HasColumnType("varbinary(max)");

                                    b2.HasKey("LetterVectorAlphabetId", "LetterVectorId");

                                    b2.ToTable("LetterVector", "vectornotes");

                                    b2.WithOwner()
                                        .HasForeignKey("LetterVectorAlphabetId", "LetterVectorId");
                                });

                            b1.Navigation("Vector")
                                .IsRequired();
                        });

                    b.Navigation("LetterVectors");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("VectorNotes.DomainModel.Note", b =>
                {
                    b.HasOne("VectorNotes.DomainModel.NoteCollection", "NoteCollection")
                        .WithMany("Notes")
                        .HasForeignKey("NoteCollectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VectorNotes.DomainModel.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.OwnsMany("VectorNotes.DomainModel.Tag", "Tags", b1 =>
                        {
                            b1.Property<int>("NoteId")
                                .HasColumnType("int");

                            b1.Property<string>("Name")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<string>("Value")
                                .HasColumnType("nvarchar(450)");

                            b1.HasKey("NoteId", "Name", "Value");

                            b1.ToTable("Tags", "vectornotes");

                            b1.WithOwner()
                                .HasForeignKey("NoteId");
                        });

                    b.Navigation("NoteCollection");

                    b.Navigation("Owner");

                    b.Navigation("Tags");
                });

            modelBuilder.Entity("VectorNotes.DomainModel.NoteCollection", b =>
                {
                    b.HasOne("VectorNotes.DomainModel.User", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("VectorNotes.DomainModel.NoteTextVector", b =>
                {
                    b.HasOne("VectorNotes.DomainModel.Alphabet", "Alphabet")
                        .WithMany()
                        .HasForeignKey("AlphabetId");

                    b.HasOne("VectorNotes.DomainModel.Note", "Note")
                        .WithMany()
                        .HasForeignKey("NoteId");

                    b.OwnsOne("VectorNotes.DomainModel.HiDimBipolarVector", "Vector", b1 =>
                        {
                            b1.Property<int>("NoteTextVectorId")
                                .HasColumnType("int");

                            b1.Property<byte[]>("Data")
                                .IsRequired()
                                .HasColumnType("varbinary(max)");

                            b1.HasKey("NoteTextVectorId");

                            b1.ToTable("NoteTextVectorCache", "vectornotes");

                            b1.WithOwner()
                                .HasForeignKey("NoteTextVectorId");
                        });

                    b.Navigation("Alphabet");

                    b.Navigation("Note");

                    b.Navigation("Vector")
                        .IsRequired();
                });

            modelBuilder.Entity("VectorNotes.DomainModel.NoteCollection", b =>
                {
                    b.Navigation("Notes");
                });
#pragma warning restore 612, 618
        }
    }
}
